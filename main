import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class Main {

    // Method to decode a number from a given base to a decimal (base 10)
    public static BigInteger baseToDecimal(int base, String value) {
        return new BigInteger(value, base);
    }

    // Method to calculate Lagrange interpolation at x = 0
    public static BigInteger lagrangeInterpolationAtZero(List<int[]> points) {
        BigInteger c = BigInteger.ZERO;
        int k = points.size();

        for (int i = 0; i < k; i++) {
            int[] point = points.get(i);
            int x_i = point[0];
            BigInteger y_i = BigInteger.valueOf(point[1]);

            // Calculate L_i(0) (Lagrange basis polynomial at x = 0)
            BigInteger L_i_at_0 = BigInteger.ONE;
            for (int j = 0; j < k; j++) {
                if (i != j) {
                    int[] otherPoint = points.get(j);
                    int x_j = otherPoint[0];
                    L_i_at_0 = L_i_at_0.multiply(BigInteger.valueOf(-x_j)).divide(BigInteger.valueOf(x_i - x_j));
                }
            }

            c = c.add(y_i.multiply(L_i_at_0));
        }

        return c;  // return the constant term c
    }

    // Method to solve the secret sharing and find the constant term c
    public static BigInteger solveSecretSharing(Map<String, Map<String, String>> inputData) {
        // Read n (number of roots) and k (minimum number of roots required)
        int n = Integer.parseInt(inputData.get("keys").get("n"));
        int k = Integer.parseInt(inputData.get("keys").get("k"));

        List<int[]> points = new ArrayList<>();

        // Iterate through each root provided in the input
        for (Map.Entry<String, Map<String, String>> entry : inputData.entrySet()) {
            String key = entry.getKey();
            if (key.equals("keys")) continue;

            Map<String, String> root = entry.getValue();
            int base = Integer.parseInt(root.get("base"));
            String value = root.get("value");

            // Decode the y value from the given base
            BigInteger y = baseToDecimal(base, value);
            int x = Integer.parseInt(key);

            points.add(new int[]{x, y.intValue()});
        }

        // Calculate the constant term (c) using Lagrange interpolation at x = 0
        return lagrangeInterpolationAtZero(points);
    }

    public static void main(String[] args) {
        // Sample input in Map format (representing JSON structure)
        Map<String, Map<String, String>> inputData = new HashMap<>();
        
        // Adding "keys" part (n and k)
        Map<String, String> keys = new HashMap<>();
        keys.put("n", "10");
        keys.put("k", "7");
        inputData.put("keys", keys);

        // Adding the roots (x, y) pairs
        addRoot(inputData, "1", "6", "13444211440455345511");
        addRoot(inputData, "2", "15", "aed7015a346d63");
        addRoot(inputData, "3", "15", "6aeeb69631c227c");
        addRoot(inputData, "4", "16", "e1b5e05623d881f");
        addRoot(inputData, "5", "8", "316034514573652620673");
        addRoot(inputData, "6", "3", "2122212201122002221120200210011020220200");
        addRoot(inputData, "7", "3", "20120221122211000100210021102001201112121");
        addRoot(inputData, "8", "6", "20220554335330240002224253");
        addRoot(inputData, "9", "12", "45153788322a1255483");
        addRoot(inputData, "10", "7", "1101613130313526312514143");

        // Find the secret (constant term) c
        BigInteger secretC = solveSecretSharing(inputData);

        // Output the constant term (secret)
        System.out.println("The secret (constant term) is: " + secretC);
    }

    // Helper method to add root to the input data map
    private static void addRoot(Map<String, Map<String, String>> inputData, String key, String base, String value) {
        Map<String, String> root = new HashMap<>();
        root.put("base", base);
        root.put("value", value);
        inputData.put(key, root);
    }
}
